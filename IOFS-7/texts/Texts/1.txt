The .NET Framework for Developers

The .NET Framework provides the following services for application developers:

    Memory management. In many programming languages, programmers are responsible for allocating and releasing memory and for handling object lifetimes. In .NET Framework applications, the CLR provides these services on behalf of the application.

    A common type system. In traditional programming languages, basic types are defined by the compiler, which complicates cross-language interoperability. In the .NET Framework, basic types are defined by the .NET Framework type system and are common to all languages that target the .NET Framework.

    An extensive class library. Instead of having to write vast amounts of code to handle common low-level programming operations, programmers can use a readily accessible library of types and their members from the .NET Framework Class Library.

    Development frameworks and technologies. The .NET Framework includes libraries for specific areas of application development, such as ASP.NET for web applications, ADO.NET for data access, and Windows Communication Foundation for service-oriented applications.

    Language interoperability. Language compilers that target the .NET Framework emit an intermediate code named Common Intermediate Language (CIL), which, in turn, is compiled at run time by the common language runtime. With this feature, routines written in one language are accessible to other languages, and programmers can focus on creating applications in their preferred language or languages.

    Version compatibility. With rare exceptions, applications that are developed by using a particular version of the .NET Framework can run without modification on a later version.

    Side-by-side execution. The .NET Framework helps resolve version conflicts by allowing multiple versions of the common language runtime to exist on the same computer. This means that multiple versions of applications can also coexist, and that an application can run on the version of the .NET Framework with which it was built.

    Multitargeting. By targeting the .NET Framework Portable Class Library, developers can create assemblies that work on multiple .NET Framework platforms, such as the .NET Framework, Silverlight, Windows Phone 7, or Xbox 360.

You can choose any programming language that supports the .NET Framework to create your application. Because the .NET Framework provides language independence and interoperability, you can interact with other .NET Framework applications and components regardless of the language with which they were developed.

To develop .NET Framework applications or components, do the following:

    Install the version of the .NET Framework that your application will target. The most recent production version is the .NET Framework 4.5.

    Select the .NET Framework language or languages that you will use to develop your applications. A large number of languages are available, including Visual Basic, C#, F#, and C++ from Microsoft. (A programming language that allows you to develop applications for the .NET Framework adheres to the Common Language Infrastructure (CLI) specification.) For a list of available programming languages, see Programming Languages for the .NET Framework.

    Select and install the development environment that you will use to create your applications and that supports your selected programming language or languages. The integrated development environment for .NET Framework applications available from Microsoft is Visual Studio. It is available in a number of retail and free editions.