(defmacro defilter [name body]
  (let [paramName (last (clojure.string/split (str name) #"-"))
        param (symbol paramName)]
    `(defn ~name [~param] ~@body)))

(defmacro defextractor [name source]
  `(defmacro ~name [& filters#]
     (let [conn# (monger.core/connect {:host "localhost" :post 27017})
           db# (monger.core/get-db conn# "chactics")
           final_filter# (merge @filters#)]
       (reduce merge (map (fn
                            [current_room#]
                            (map #(assoc % :room current_room#) (monger.collection/find-maps db# current_room# final_filter#))) ~source)))))
                            (map #(assoc % :room current_room#) (monger.collection/find-maps db# current_room# final_filter#))) ~source)))))